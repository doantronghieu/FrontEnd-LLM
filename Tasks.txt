- Research and gather requirements for the chatbot widget, including user experience expectations and accessibility guidelines.- Sketch initial design concepts for the chatbot widget on mobile and desktop, focusing on a clean and intuitive user interface.- Create high-fidelity designs for the chatbot widget using a design tool like Figma or Sketch, ensuring mobile-first and responsive design principles.- Set up a new Nuxt.js for server-side rendering and improved performance.- Develop the chatbot widget's component structure using Vue.js, Nuxt.Js, ensuring a modular and scalable architecture.- Implement state management using Vuex to handle user interactions and chatbot widget state.- Apply TailwindCSS styles to the chatbot widget components, ensuring visual consistency with the overall website design.- Ensure the chatbot widget is responsive and adapts to various screen sizes and devices.- Implement accessibility features, such as ARIA roles, keyboard navigation, and appropriate color contrast, following a11y guidelines.
- Integrate the chatbot widget with a communication API using REST or WebSockets for real-time communication with the backend service.
- Optimize the code using techniques like code splitting and lazy loading to ensure efficient loading and execution.
- Test the chatbot widget for cross-browser compatibility, covering major browsers like Chrome, Firefox, Safari, and Edge.
- Perform performance testing and optimization, addressing any issues related to load time and memory usage.
- Write unit tests for the Vue.js components and the API integration layer to ensure code quality and maintainability.
- Document the chatbot widget's codebase, design decisions, and setup instructions for future reference and collaboration.

###
Suggest me some links for sport news
Python function to add numbers
Tell me a joke
###

README.md
app.vue
components/ui/BackgroundComponent.vue

layouts/default.vue
store/personnelStore.js
store/programStore.js
components/TDTU/BaseCardPersonnel.vue
components/TDTU/BaseCardProgramDetail.vue
components/TDTU/BaseCardProgramIntro.vue
data/tdtu/feee/personnel.json
data/tdtu/feee/programs.json
pages/tdtu/feee/personnel.vue
pages/tdtu/feee/programs.vue
store/messages.ts
store/providers.ts
server.js

components/ChatbotWidget/ChatProviderIcon.vue
components/ChatbotWidget/ChatWindow.vue
components/ChatbotWidget/ChatbotIcon.vue
components/ChatbotWidget/ChatbotSmall.vue
components/ChatbotWidget/MessageBubble.vue
components/ChatbotWidget/MessageInput.vue
composables/useChatGpt.js
composables/useChatRandom.js
nuxt.config.ts
store/messages.ts
store/providers.ts

git reset --hard 188acc2

FrontEnd/

I want that, when we click on the component BaseCardProgramIntro, it will pop up a modal and show the component BaseCardProgramDetail

I want a navigation bar that use can click to navigate between pages. Use VerticalNavigation from NuxtUI. Example:
```python
<script setup lang="ts">
const route = useRoute()

const links = [{
  label: 'Profile',
  avatar: {
    src: 'https://avatars.githubusercontent.com/u/739984?v=4'
  },
  badge: 100
}, {
  label: 'Installation',
  icon: 'i-heroicons-home',
  to: '/getting-started/installation'
}, {
  label: 'Vertical Navigation',
  icon: 'i-heroicons-chart-bar',
  to: `${route.path.startsWith('/dev') ? '/dev' : ''}/components/vertical-navigation`
}, {
  label: 'Command Palette',
  icon: 'i-heroicons-command-line',
  to: '/components/command-palette'
}]
</script>

<template>
  <UVerticalNavigation :links="links" />
</template>
```